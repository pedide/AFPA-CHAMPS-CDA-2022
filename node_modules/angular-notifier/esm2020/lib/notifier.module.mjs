import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { NotifierContainerComponent } from './components/notifier-container.component';
import { NotifierNotificationComponent } from './components/notifier-notification.component';
import { NotifierConfig } from './models/notifier-config.model';
import { NotifierConfigToken, NotifierOptionsToken } from './notifier.tokens';
import { NotifierService } from './services/notifier.service';
import { NotifierAnimationService } from './services/notifier-animation.service';
import { NotifierQueueService } from './services/notifier-queue.service';
import * as i0 from "@angular/core";
/**
 * Factory for a notifier configuration with custom options
 *
 * Sidenote:
 * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.
 *
 * @param   options - Custom notifier options
 * @returns - Notifier configuration as result
 */
export function notifierCustomConfigFactory(options) {
    return new NotifierConfig(options);
}
/**
 * Factory for a notifier configuration with default options
 *
 * Sidenote:
 * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.
 *
 * @returns - Notifier configuration as result
 */
export function notifierDefaultConfigFactory() {
    return new NotifierConfig({});
}
/**
 * Notifier module
 */
export class NotifierModule {
    /**
     * Setup the notifier module with custom providers, in this case with a custom configuration based on the givne options
     *
     * @param   [options={}] - Custom notifier options
     * @returns - Notifier module with custom providers
     */
    static withConfig(options = {}) {
        return {
            ngModule: NotifierModule,
            providers: [
                // Provide the options itself upfront (as we need to inject them as dependencies -- see below)
                {
                    provide: NotifierOptionsToken,
                    useValue: options,
                },
                // Provide a custom notifier configuration, based on the given notifier options
                {
                    deps: [NotifierOptionsToken],
                    provide: NotifierConfigToken,
                    useFactory: notifierCustomConfigFactory,
                },
            ],
        };
    }
}
NotifierModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: NotifierModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NotifierModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: NotifierModule, declarations: [NotifierContainerComponent, NotifierNotificationComponent], imports: [CommonModule], exports: [NotifierContainerComponent] });
NotifierModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: NotifierModule, providers: [
        NotifierAnimationService,
        NotifierService,
        NotifierQueueService,
        // Provide the default notifier configuration if just the module is imported
        {
            provide: NotifierConfigToken,
            useFactory: notifierDefaultConfigFactory,
        },
    ], imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: NotifierModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NotifierContainerComponent, NotifierNotificationComponent],
                    exports: [NotifierContainerComponent],
                    imports: [CommonModule],
                    providers: [
                        NotifierAnimationService,
                        NotifierService,
                        NotifierQueueService,
                        // Provide the default notifier configuration if just the module is imported
                        {
                            provide: NotifierConfigToken,
                            useFactory: notifierDefaultConfigFactory,
                        },
                    ],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpZXIubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci1ub3RpZmllci9zcmMvbGliL25vdGlmaWVyLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUF1QixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFOUQsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDdkYsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sOENBQThDLENBQUM7QUFDN0YsT0FBTyxFQUFFLGNBQWMsRUFBbUIsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNqRixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM5RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDOUQsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDakYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7O0FBRXpFOzs7Ozs7OztHQVFHO0FBQ0gsTUFBTSxVQUFVLDJCQUEyQixDQUFDLE9BQXdCO0lBQ2xFLE9BQU8sSUFBSSxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDckMsQ0FBQztBQUVEOzs7Ozs7O0dBT0c7QUFDSCxNQUFNLFVBQVUsNEJBQTRCO0lBQzFDLE9BQU8sSUFBSSxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDaEMsQ0FBQztBQUVEOztHQUVHO0FBaUJILE1BQU0sT0FBTyxjQUFjO0lBQ3pCOzs7OztPQUtHO0lBQ0ksTUFBTSxDQUFDLFVBQVUsQ0FBQyxVQUEyQixFQUFFO1FBQ3BELE9BQU87WUFDTCxRQUFRLEVBQUUsY0FBYztZQUN4QixTQUFTLEVBQUU7Z0JBQ1QsOEZBQThGO2dCQUM5RjtvQkFDRSxPQUFPLEVBQUUsb0JBQW9CO29CQUM3QixRQUFRLEVBQUUsT0FBTztpQkFDbEI7Z0JBRUQsK0VBQStFO2dCQUMvRTtvQkFDRSxJQUFJLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQztvQkFDNUIsT0FBTyxFQUFFLG1CQUFtQjtvQkFDNUIsVUFBVSxFQUFFLDJCQUEyQjtpQkFDeEM7YUFDRjtTQUNGLENBQUM7SUFDSixDQUFDOzsyR0F6QlUsY0FBYzs0R0FBZCxjQUFjLGlCQWZWLDBCQUEwQixFQUFFLDZCQUE2QixhQUU5RCxZQUFZLGFBRFosMEJBQTBCOzRHQWN6QixjQUFjLGFBWmQ7UUFDVCx3QkFBd0I7UUFDeEIsZUFBZTtRQUNmLG9CQUFvQjtRQUVwQiw0RUFBNEU7UUFDNUU7WUFDRSxPQUFPLEVBQUUsbUJBQW1CO1lBQzVCLFVBQVUsRUFBRSw0QkFBNEI7U0FDekM7S0FDRixZQVhRLENBQUMsWUFBWSxDQUFDOzJGQWFaLGNBQWM7a0JBaEIxQixRQUFRO21CQUFDO29CQUNSLFlBQVksRUFBRSxDQUFDLDBCQUEwQixFQUFFLDZCQUE2QixDQUFDO29CQUN6RSxPQUFPLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQztvQkFDckMsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDO29CQUN2QixTQUFTLEVBQUU7d0JBQ1Qsd0JBQXdCO3dCQUN4QixlQUFlO3dCQUNmLG9CQUFvQjt3QkFFcEIsNEVBQTRFO3dCQUM1RTs0QkFDRSxPQUFPLEVBQUUsbUJBQW1COzRCQUM1QixVQUFVLEVBQUUsNEJBQTRCO3lCQUN6QztxQkFDRjtpQkFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBOb3RpZmllckNvbnRhaW5lckNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9ub3RpZmllci1jb250YWluZXIuY29tcG9uZW50JztcbmltcG9ydCB7IE5vdGlmaWVyTm90aWZpY2F0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL25vdGlmaWVyLW5vdGlmaWNhdGlvbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgTm90aWZpZXJDb25maWcsIE5vdGlmaWVyT3B0aW9ucyB9IGZyb20gJy4vbW9kZWxzL25vdGlmaWVyLWNvbmZpZy5tb2RlbCc7XG5pbXBvcnQgeyBOb3RpZmllckNvbmZpZ1Rva2VuLCBOb3RpZmllck9wdGlvbnNUb2tlbiB9IGZyb20gJy4vbm90aWZpZXIudG9rZW5zJztcbmltcG9ydCB7IE5vdGlmaWVyU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvbm90aWZpZXIuc2VydmljZSc7XG5pbXBvcnQgeyBOb3RpZmllckFuaW1hdGlvblNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL25vdGlmaWVyLWFuaW1hdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IE5vdGlmaWVyUXVldWVTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9ub3RpZmllci1xdWV1ZS5zZXJ2aWNlJztcblxuLyoqXG4gKiBGYWN0b3J5IGZvciBhIG5vdGlmaWVyIGNvbmZpZ3VyYXRpb24gd2l0aCBjdXN0b20gb3B0aW9uc1xuICpcbiAqIFNpZGVub3RlOlxuICogUmVxdWlyZWQgYXMgQW5ndWxhciBBb1QgY29tcGlsYXRpb24gY2Fubm90IGhhbmRsZSBkeW5hbWljIGZ1bmN0aW9uczsgc2VlIDxodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8xMTI2Mj4uXG4gKlxuICogQHBhcmFtICAgb3B0aW9ucyAtIEN1c3RvbSBub3RpZmllciBvcHRpb25zXG4gKiBAcmV0dXJucyAtIE5vdGlmaWVyIGNvbmZpZ3VyYXRpb24gYXMgcmVzdWx0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub3RpZmllckN1c3RvbUNvbmZpZ0ZhY3Rvcnkob3B0aW9uczogTm90aWZpZXJPcHRpb25zKTogTm90aWZpZXJDb25maWcge1xuICByZXR1cm4gbmV3IE5vdGlmaWVyQ29uZmlnKG9wdGlvbnMpO1xufVxuXG4vKipcbiAqIEZhY3RvcnkgZm9yIGEgbm90aWZpZXIgY29uZmlndXJhdGlvbiB3aXRoIGRlZmF1bHQgb3B0aW9uc1xuICpcbiAqIFNpZGVub3RlOlxuICogUmVxdWlyZWQgYXMgQW5ndWxhciBBb1QgY29tcGlsYXRpb24gY2Fubm90IGhhbmRsZSBkeW5hbWljIGZ1bmN0aW9uczsgc2VlIDxodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8xMTI2Mj4uXG4gKlxuICogQHJldHVybnMgLSBOb3RpZmllciBjb25maWd1cmF0aW9uIGFzIHJlc3VsdFxuICovXG5leHBvcnQgZnVuY3Rpb24gbm90aWZpZXJEZWZhdWx0Q29uZmlnRmFjdG9yeSgpOiBOb3RpZmllckNvbmZpZyB7XG4gIHJldHVybiBuZXcgTm90aWZpZXJDb25maWcoe30pO1xufVxuXG4vKipcbiAqIE5vdGlmaWVyIG1vZHVsZVxuICovXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtOb3RpZmllckNvbnRhaW5lckNvbXBvbmVudCwgTm90aWZpZXJOb3RpZmljYXRpb25Db21wb25lbnRdLFxuICBleHBvcnRzOiBbTm90aWZpZXJDb250YWluZXJDb21wb25lbnRdLFxuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAgTm90aWZpZXJBbmltYXRpb25TZXJ2aWNlLFxuICAgIE5vdGlmaWVyU2VydmljZSxcbiAgICBOb3RpZmllclF1ZXVlU2VydmljZSxcblxuICAgIC8vIFByb3ZpZGUgdGhlIGRlZmF1bHQgbm90aWZpZXIgY29uZmlndXJhdGlvbiBpZiBqdXN0IHRoZSBtb2R1bGUgaXMgaW1wb3J0ZWRcbiAgICB7XG4gICAgICBwcm92aWRlOiBOb3RpZmllckNvbmZpZ1Rva2VuLFxuICAgICAgdXNlRmFjdG9yeTogbm90aWZpZXJEZWZhdWx0Q29uZmlnRmFjdG9yeSxcbiAgICB9LFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBOb3RpZmllck1vZHVsZSB7XG4gIC8qKlxuICAgKiBTZXR1cCB0aGUgbm90aWZpZXIgbW9kdWxlIHdpdGggY3VzdG9tIHByb3ZpZGVycywgaW4gdGhpcyBjYXNlIHdpdGggYSBjdXN0b20gY29uZmlndXJhdGlvbiBiYXNlZCBvbiB0aGUgZ2l2bmUgb3B0aW9uc1xuICAgKlxuICAgKiBAcGFyYW0gICBbb3B0aW9ucz17fV0gLSBDdXN0b20gbm90aWZpZXIgb3B0aW9uc1xuICAgKiBAcmV0dXJucyAtIE5vdGlmaWVyIG1vZHVsZSB3aXRoIGN1c3RvbSBwcm92aWRlcnNcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgd2l0aENvbmZpZyhvcHRpb25zOiBOb3RpZmllck9wdGlvbnMgPSB7fSk6IE1vZHVsZVdpdGhQcm92aWRlcnM8Tm90aWZpZXJNb2R1bGU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IE5vdGlmaWVyTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIC8vIFByb3ZpZGUgdGhlIG9wdGlvbnMgaXRzZWxmIHVwZnJvbnQgKGFzIHdlIG5lZWQgdG8gaW5qZWN0IHRoZW0gYXMgZGVwZW5kZW5jaWVzIC0tIHNlZSBiZWxvdylcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IE5vdGlmaWVyT3B0aW9uc1Rva2VuLFxuICAgICAgICAgIHVzZVZhbHVlOiBvcHRpb25zLFxuICAgICAgICB9LFxuXG4gICAgICAgIC8vIFByb3ZpZGUgYSBjdXN0b20gbm90aWZpZXIgY29uZmlndXJhdGlvbiwgYmFzZWQgb24gdGhlIGdpdmVuIG5vdGlmaWVyIG9wdGlvbnNcbiAgICAgICAge1xuICAgICAgICAgIGRlcHM6IFtOb3RpZmllck9wdGlvbnNUb2tlbl0sXG4gICAgICAgICAgcHJvdmlkZTogTm90aWZpZXJDb25maWdUb2tlbixcbiAgICAgICAgICB1c2VGYWN0b3J5OiBub3RpZmllckN1c3RvbUNvbmZpZ0ZhY3RvcnksXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==